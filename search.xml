<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Python之面试题]]></title>
      <url>/2019/02/23/Python%E4%B9%8B%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><h4 id="普通拷贝"><a href="#普通拷贝" class="headerlink" title="普通拷贝"></a>普通拷贝</h4><p><strong>描述:</strong>拷贝对象拷贝被拷贝对象中保存的地址，如果其中一个对象有改变，另一个也会一起改变。</p>
<h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p><strong>描述:</strong>拷贝对象拷贝被拷贝对象保存地址中的数据堆产生一个新的地址，拷贝对象中保存新新地址，改变其中一个另一个的数据不会跟着改变；但是如果数据中保存有地址，地址对应的数据如果产生改变，那么拷贝对象与被拷贝对象中的数据都会跟着改变。</p>
<h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p><strong>描述:</strong>拷贝对象拷贝被拷贝对象保存地址中的数据堆产生一个新的地址，如果数据堆中保存有地址则会继续拷贝数据堆中地址对应的数据堆产生新地址，直到最后一个数据堆中数据不再保存有地址才会结束拷贝，深拷贝后，不论修改其中一个对象的哪一层数据都不会堆另一个对象中的数据产生影响。</p>
<h3 id="Python中的内存管理机制"><a href="#Python中的内存管理机制" class="headerlink" title="Python中的内存管理机制"></a>Python中的内存管理机制</h3>]]></content>
      
        
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之运算符]]></title>
      <url>/2019/02/23/Python%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>python支持:数学运算符、比较运算符、逻辑运算符、赋值运算符、（位运算符）</p>
<h4 id="数学运算符-加-减-乘-除-整除-取余-幂运算"><a href="#数学运算符-加-减-乘-除-整除-取余-幂运算" class="headerlink" title="数学运算符: +(加),-(减),*(乘),/(除),//(整除),%(取余),**(幂运算)"></a>数学运算符: +(加),-(减),*(乘),/(除),//(整除),%(取余),**(幂运算)</h4><p>a. 其中+、/、*、/和数学中的加减乘除一模一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(10+20)</span><br></pre></td></tr></table></figure></p>
<p>b. //（整除），数字1//数字2 –&gt; 让数字1除以数字2，结果只取整数部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">练习：获取数字234中的百位上的数</span><br><span class="line">print(234 // 100)</span><br></pre></td></tr></table></figure></p>
<p>c.%(取余)，求余数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(5 % 2)</span><br><span class="line">print(10 % 4)</span><br></pre></td></tr></table></figure></p>
<p><em>应用一：获取一个数的个位数</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(234 % 10)</span><br></pre></td></tr></table></figure></p>
<p><em>应用二：判断一个数的奇偶性，查看结果为1(奇数)还是0(偶数)</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(234%2)</span><br></pre></td></tr></table></figure></p>
<p>d.**(幂运算)，x**y –&gt; x的y次方<br>运算符的运算对象不一定非得是数字，也可以是存储数据的变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(2**3)</span><br><span class="line">print(10**4)</span><br><span class="line">print(16 ** (1/2))</span><br></pre></td></tr></table></figure></p>
<h4 id="2-比较运算符：-gt-lt-gt-lt"><a href="#2-比较运算符：-gt-lt-gt-lt" class="headerlink" title="2.比较运算符：&gt;, &lt;, ==, &gt;=, &lt;=, !="></a>2.比较运算符：&gt;, &lt;, ==, &gt;=, &lt;=, !=</h4><p>所有的比较运算的结果都是布尔值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(10&gt;20)   # False</span><br><span class="line">print(10&lt;20)   # True</span><br><span class="line">print(10==20)  # False</span><br><span class="line">print(10!=20)  # True</span><br><span class="line">print(10&gt;=20)  # False</span><br><span class="line">print(10&lt;=20)  # True</span><br></pre></td></tr></table></figure></p>
<p><strong><em>补充：is的使用</em></strong><br>*个变量有三要素，分别是：类型（变量中存储的数据的类型）、值（变量存储的数据）、地址（变量真正存储的内容，数据地址）</p>
<ul>
<li>类型 - type(变量)</li>
<li>值   - 直接使用变量，就是使用值()</li>
<li>地址 - id(变量) </li>
<li>==  和 is的区别</li>
</ul>
<ul>
<li>==: 判断值是否相等</li>
<li>is: 判断的是地址是否相等*<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num = 100</span><br><span class="line">print(type(num), num, id(num))</span><br><span class="line">list1 = [1, 2]</span><br><span class="line">list2 = [1, 2]</span><br><span class="line">list3 = list1</span><br><span class="line">print(list1, list2)</span><br><span class="line">print(id(list1), id(list2))</span><br><span class="line">print(list1 == list2, list1 is list2)</span><br><span class="line">print(list1 == list3, list1 is list3)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="3-逻辑运算符-and-逻辑与-or-逻辑或-not-逻辑非-；"><a href="#3-逻辑运算符-and-逻辑与-or-逻辑或-not-逻辑非-；" class="headerlink" title="3.逻辑运算符: and(逻辑与),or(逻辑或),not(逻辑非)；"></a>3.逻辑运算符: and(逻辑与),or(逻辑或),not(逻辑非)；</h4><p>逻辑运算的运算对象和运算结果都是布尔值<br>a.and - 如果值1 and 值2 –&gt;入股了两个True结果就是True，否则结果是F相当于生活逻辑中”并且”；<br><strong><em>短路操作：</em></strong> <em>如果第一个条件是False，就不会判断第二个条件，整个结果直接为False<br>**</em>应用：<strong><em>要求多个条件同时满足的时候，后可以使用逻辑运算符和运算</em><br>b. or - 值1 or 值2 –&gt;如果两个都为False结果才是False，否则结果是True；相当于逻辑中的‘或’<br>*</strong>短路操作：<strong><em> </em>如果第一个条件是True，就不会判断后面的条件，直接判断运算结果为True<br>*</strong>应用：<em>**要求多个条件只要满足一个条件，就是使用逻辑或运算</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">True or True  -&gt;True</span><br><span class="line">True or False -&gt;True</span><br><span class="line">False or False -&gt;False</span><br><span class="line"></span><br><span class="line">练习：如果考试成绩小于60分，或者上课不听讲就是降班</span><br><span class="line">grade = 54</span><br><span class="line">is_not_in_class = False</span><br><span class="line">print(&apos;是否降班：&apos;, grade &lt; 60 or is_not_in_class)</span><br></pre></td></tr></table></figure></p>
<p>c. not 值1  –&gt;对值1进行否定/取反（不是、否定）结论<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">not True -&gt; False</span><br><span class="line">not False -&gt; True</span><br><span class="line">年龄不小于10</span><br><span class="line">age = 20</span><br><span class="line">print(not age &lt; 10)</span><br></pre></td></tr></table></figure></p>
<h4 id="4-赋值运算符："><a href="#4-赋值运算符：" class="headerlink" title="4. 赋值运算符： =, +=, -=, /=, //=, %=, **="></a>4. 赋值运算符： =, +=, -=, /=, //=, %=, **=</h4><p>所有的赋值运算符，要求赋值符号的左边必须是变量；右边是有结果的（是值）<br>a. 变量 = 结果 –&gt; 将结果赋给变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = 100</span><br><span class="line">num2 = num   #变量给变量赋值，赋值的是变量的值得地址，不是变量的地址</span><br></pre></td></tr></table></figure></p>
<p>b. +=, -=, /=, //=, %=, *<em>=
</em>复合赋值运算符要求赋值符号的左边除了是变量以外，还要求这个变量已经被赋过值<br>变量 += 数字  –&gt; 变量 = 变量 +数字 （将变量原来的值加上指定的数字以后的新值再重新赋给变量）*<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num3 = 2</span><br><span class="line">num3 += 10   # num3 = num3 +10</span><br><span class="line">print(num3)  # 12</span><br><span class="line">num3 -= 3    # num3 = num3 - 3</span><br><span class="line">print(num3)  # 9</span><br></pre></td></tr></table></figure></p>
<h4 id="5-运算符的优先级"><a href="#5-运算符的优先级" class="headerlink" title="5.运算符的优先级"></a>5.运算符的优先级</h4><p>数学运算符 &gt; 比较运算符 &gt; 逻辑运算符 &gt; 赋值运算符<br>数学运算符中 *<em> &gt; </em>, /, %, // &gt; +, -<br><em>优先级高的先算，优先级低的后算。如果有（），先算（）里面（所有符号都是英文）</em></p>
]]></content>
      
        
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之数据类型]]></title>
      <url>/2019/02/23/Python%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><h4 id="整型-int"><a href="#整型-int" class="headerlink" title="整型(int)"></a>整型(int)</h4><p>整型包含所有的整数,支持二进制、八进制、十六进制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num1 = 123        # 十进制: 直接写十进制数字(0-9表示)</span><br><span class="line">num2 = 0b10011    # 二进制: 0b+二进制数(0-1表示)</span><br><span class="line">num3 = 0o5667     # 八进制: 0o+八进制数(0-7表示)</span><br><span class="line">num4 = 0x89df     # 十六进制: 0x+十六进制数(0-9和A-F表示)</span><br><span class="line">print(123, bin(123), oct(123), hex(123))</span><br></pre></td></tr></table></figure></p>
<h4 id="浮点型-float"><a href="#浮点型-float" class="headerlink" title="浮点型(float)"></a>浮点型(float)</h4><p>浮点型包含所有的小数，支持科学技术法()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num1 = 12.5</span><br><span class="line">num2 = 3e2     # 代表 3乘10的2次方</span><br><span class="line">print(num1, num2)</span><br></pre></td></tr></table></figure></p>
<h4 id="布尔类型-bool"><a href="#布尔类型-bool" class="headerlink" title="布尔类型(bool)"></a>布尔类型(bool)</h4><p>布尔类型值只有True == 1和False == 0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num1 = True + 10</span><br><span class="line">print(num1, True == 1, False != 0)</span><br></pre></td></tr></table></figure></p>
<h4 id="复数-complex"><a href="#复数-complex" class="headerlink" title="复数(complex)"></a>复数(complex)</h4><p>复数包含实部和虚部(j)，表示方式: m + nj<br><em>注意: j前面必须有数字，不能省略</em></p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="认识字符串"><a href="#认识字符串" class="headerlink" title="认识字符串"></a>认识字符串</h4><p>通过单引号或者双引号括起来的字符集(文本)就是字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = &apos;abc&apos;</span><br><span class="line">str2 = &quot;abc123&quot;</span><br></pre></td></tr></table></figure></p>
<h4 id="字符串类型-str"><a href="#字符串类型-str" class="headerlink" title="字符串类型(str)"></a>字符串类型(str)</h4><p>str是Python自己提供的一种容器型数据类型，一个字符串中可以存储多个字符<br><strong>什么是字符:</strong> Python中只有字符的概念没有字符类型;如果Python中要表示一个字符，用一个长度是1的字符串来表示<br><strong>字符串不可变但有序:</strong> 不可变指的是值和字符串的长度不可变，有序指的是每个字符在字符串中的位置是确定的字符串’abc’和字符串’bac’不一样</p>
<h4 id="字符串中的字符"><a href="#字符串中的字符" class="headerlink" title="字符串中的字符"></a>字符串中的字符</h4><p><strong>a. 普通字符:</strong> 包含一般的字母、数字、符号、其他文字，例如: ‘a’, ‘G’, ‘1’, ‘+’, ‘^’, ‘?’, ‘好’。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = 100</span><br><span class="line">data = &apos;100&apos;</span><br><span class="line">str3 = &apos;agh231好&apos;</span><br></pre></td></tr></table></figure></p>
<p><strong>b. 转义字符:</strong> 通过在一些特定的字符前加\，来表示特殊的功能或者意义，这样的字符就是转义字符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\n     -  换行</span><br><span class="line">\&apos;/\&quot;  -  去除引号号本身的含义</span><br><span class="line">\\     -  表示一个反斜杠</span><br><span class="line">\a     -  空格</span><br><span class="line">\t     -  表示tab键</span><br><span class="line"></span><br><span class="line">str4 = &apos;abc\n123&apos;</span><br><span class="line">print(str4)</span><br><span class="line">str5 = &apos;\thello\&apos;A&apos;</span><br><span class="line">print(str5)</span><br><span class="line">str6 = &quot;he\&quot;ll\&apos;o&quot;</span><br><span class="line">print(str6)</span><br></pre></td></tr></table></figure></p>
<p><strong><em>注意:</em></strong><br>&emsp;<em>1.没有阻止转义的时候，一个转义字符的长度是1<br>&emsp;2.可以在字符串的最前面加r/R来阻止转义。(阻止字符串中的所有转义字符转义)</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 阻止转义</span><br><span class="line">str8 = r&apos;\t姓名:小白\n\t年龄:18&apos;</span><br><span class="line">print(str8)</span><br></pre></td></tr></table></figure></p>
<p><strong>c.编码字符:</strong> 在字符串中以’\u1234’，这里的1234表示四位十六进制编码表示一个字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str9 = &apos;你好\u425f&apos;</span><br><span class="line">print(str9)</span><br></pre></td></tr></table></figure></p>
<h4 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h4><p>计算机在存储数据的时候只能存数字，并且只能是二进制的补码</p>
<ul>
<li>10 -&gt; 转换成二进制 -&gt; 求补码(存)</li>
<li>计算机编码就是数据对应的数字</li>
<li>字符编码就是为了将字符存储到计算机中，给每个字符对应的一个固定的数字。这个数字就是这个字符的编码</li>
<li>目前计算机采用的编码方式有两种，分别是ASCII码表和Unicode码表。Python中采用的是Unicode编码</li>
<li>ASCII码采用一个字节对字符进行编码（总共128个字符）</li>
<li>Unicode码包含ASCII码，采用两个字节对字符进行编码，包含了世界上所有的语言和符号，又称万国码<br>&emsp;<em>小写字母的编码范围(a-z): 97 - 122<br>&emsp;大写字母的编码范围(A-Z): 65 - 90<br>&emsp;中文编码范围: 0x4e00 - 0x9fa5<br>&emsp;字符编码相关的函数:<br>&emsp;&emsp;a.chr(编码值) - 获取编码对应的字符<br>&emsp;&emsp;b.ord(字符)   - 获取字符的编码（以十进制的形式返回）</em></li>
</ul>
<h4 id="获取字符"><a href="#获取字符" class="headerlink" title="获取字符"></a>获取字符</h4><h5 id="1-获取单个字符"><a href="#1-获取单个字符" class="headerlink" title="1. 获取单个字符"></a>1. 获取单个字符</h5><p>字符串中的每一个字符都会对应一个唯一的下标（索引）用来表示字符在字符串中的位置。下标是从0开始一次增加，0对应的是第一个字符(0 ~ 字符串长度 - 1)；也可以是从-1开始依次减少，-1代表最后一个字符(-1~ -字符串长）。<br><strong>例如:</strong> ‘hello’  -&gt; h -&gt; (0,-5) e -&gt; (1,-4), l -&gt; (2,-3), l -&gt; (3,-2), o -&gt; (4,-1)<br><strong>语法:</strong> 字符串[下标] - 获取字符串指定下标对应的字符<br><strong>说明:</strong> 字符串 - 只要结果是字符串的表达式都可以，例如：字符串字面量，字符串变量<br>&emsp;&emsp;&nbsp;&nbsp;[]     - 固定写法<br>&emsp;&emsp;&nbsp;&nbsp;下标   - 需要获取的字符对应的下标；注意，这儿的下标不能越界<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">result = &apos;how are you!&apos;[0] # 获取字符串&apos;how are you!&apos;中下标是0的字符，并且赋值给result</span><br><span class="line">print(result)</span><br><span class="line">print(&apos;how are you!&apos;[-4])  #y</span><br><span class="line"># print(&apos;how are you!&apos;[-13])  # IndexError: string index out of range 越界</span><br><span class="line">str1 = &apos;good good study! day day up!&apos;</span><br><span class="line">print(str1[10])</span><br></pre></td></tr></table></figure></p>
<h5 id="2-获取部分字符（字符串切片）"><a href="#2-获取部分字符（字符串切片）" class="headerlink" title="2. 获取部分字符（字符串切片）"></a>2. 获取部分字符（字符串切片）</h5><p><strong>方法一:</strong><br><strong>a. 语法:</strong><br>&emsp;字符串[开始下标:结束下标:步长]  -  从开始下标开始，获取到结束下标前为止。每次下标值加上步长<br><strong>b. 说明:</strong><br>&emsp;字符串 - 只要结果是字符串的表达式都可以，例如: 字符串字面量，字符串变量<br>&emsp;[] - 固定写法<br>&emsp;开始下标、结束下标 - 下标值(这里的下标可以越界)<br>&emsp;步长 - 必须是整数(正数和负数都行):  如果步长是正数，是从下标开始从前往后获取；如果步长是负数，是从下标开始从后往前获取<br><strong>c. 注意:</strong><br>&emsp;当步长为正，要求开始下标对应的位置必须在结束下标对应的字符的位置的前面，否则结果为空串！<br>&emsp;当步长为负，要求开始下标对应的位置必须在结束下标对应的字符的位置的后面，否则结果为空串！<br>&emsp;不管怎么取，结束下标一定取不到！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str2 = &apos;hello python!&apos;</span><br><span class="line">print(str2[0:100:1])   # 从前往后取所有</span><br><span class="line">print(str2[-1:-100:-1])  # 从后往前取所有</span><br><span class="line">str2 = &apos;The only sure criterion of truth is eternal self-conformity.&apos;</span><br><span class="line"></span><br><span class="line"># 练习：获取一个字符所有下标是奇数的字符（顺序）</span><br><span class="line">str3 = &apos;The only sure criterion of truth is eternal self-conformity&apos;</span><br><span class="line">print(str3[1:-1:2])</span><br></pre></td></tr></table></figure></p>
<p><strong>方法二(省略步长):</strong><br>&emsp;字符串[开始下标:结束下标]   -步长是1；从开始下标到结束下标为止，一个一个取！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;when i was young!&apos;[2:6])</span><br></pre></td></tr></table></figure></p>
<p><strong>方法三(省略开始下标和结束下标):</strong><br><strong>a. 省略开始下标</strong><br>&emsp;字符串[:结束下标:步长] - 当步长为正数，从字符串的第一个字符开始取到结束下标前为止；当步长为负数，从字符串的最后一个字符开始取到结束下标前为止。<br> <strong>b. 省略结束下标</strong><br>&emsp;字符串[开始下标::步长] - 当步长为正数，从开始下标开始取到字符串最后一个字符为止；当步长为负数，从开始下标开始取到字符串的第一个字符为止。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str4 = &apos;when i was young!&apos;</span><br><span class="line">print(str4[:6], str4[:6:-1])</span><br><span class="line">print(str4[2:], str4[2::-1])</span><br><span class="line">print(str4[:])</span><br><span class="line">print(str4[::-1])  #字符串倒序</span><br></pre></td></tr></table></figure></p>
<p><strong><em>注意:</em></strong> <em>获取单个字符下标不饿能够越界，获取部分字符下标可以越界</em></p>
<h4 id="字符串相关运算符"><a href="#字符串相关运算符" class="headerlink" title="字符串相关运算符"></a>字符串相关运算符</h4><h5 id="1-字符串支持的运算符-gt-lt-gt-lt"><a href="#1-字符串支持的运算符-gt-lt-gt-lt" class="headerlink" title="1.字符串支持的运算符: +, *, &gt;, &lt;, &gt;=, &lt;="></a>1.字符串支持的运算符: +, *, &gt;, &lt;, &gt;=, &lt;=</h5><p>python中的字符串支持数学运算符中的+和*，以及所有的比较运算符<br><strong>a. +:</strong> 字符串1 + 字符串2 - 将字符串1和字符串2拼接到一起产生一个新的字符串<br><strong>注意:</strong> <em>字符串只能和字符串相加，不能和数字混合相加！</em><br><strong>b. * :</strong> 字符串 * N  - N是正整数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new_str = &apos;abc&apos; + &apos;123&apos;</span><br><span class="line">print(new_str)</span><br><span class="line">str1 = &apos;123&apos;</span><br><span class="line">print(str1 * 3)</span><br></pre></td></tr></table></figure></p>
<p><strong>c. 比较是否相等:</strong> ==, != 可以判断两个字符串是否相等或者不相等<br><strong>d. 字符比较大小:</strong> 从第一个字符开始依次往后找，找到第一个不相等的字符对，判断它们的编码值大小；谁的编码值大，对应的字符串就大；不会再往后比较了!<br><strong>应用:</strong><br>&emsp;1.判断是否是小写字母: ‘a’&lt;=char&lt;=’z’ &lt;==&gt; char&gt;=’a’ and char &lt;= ‘z’<br>&emsp;2.判断是否是大写字母: ‘A’&lt;=char&lt;=’Z’ &lt;==&gt; char&gt;=’A’ and char &lt;= ‘Z’<br>&emsp;3.判断是否是字母: ‘A’&lt;=char&lt;=’Z’ or ‘a’&lt;=char&lt;=’z’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;abc&apos; == &apos;abc&apos;)</span><br><span class="line">print(&apos;abc&apos; == &apos;acb&apos;)</span><br><span class="line">print(&apos;abc&apos; != &apos;abc&apos;)</span><br><span class="line">print(&apos;dcb&apos; &gt; &apos;abcde&apos;)  #依次比编码值得大小，当有一个字符编码能确定大小时，结束比较</span><br><span class="line"># 判断一个字符串中第三个字符是否是字母</span><br><span class="line">str2 = &apos;shk23.ssy23&apos;</span><br><span class="line">char = str2[2]  # 将第三个字符取出</span><br><span class="line">print(&apos;是否是字母:&apos;, &apos;A&apos;&lt;=char&lt;=&apos;Z&apos; or &apos;a&apos;&lt;=char&lt;=&apos;z&apos;)</span><br><span class="line">print(&apos;\u4e00&apos;, &apos;\u9fa5&apos;)</span><br></pre></td></tr></table></figure></p>
<h5 id="2-in和not-in操作"><a href="#2-in和not-in操作" class="headerlink" title="2.in和not in操作"></a>2.in和not in操作</h5><p>字符串1 in 字符串2     -&gt; 判断字符串2中是否包含字符串1(判断字符串1是否是字符串2的子串)<br>字符串1 not in 字符串2 -&gt; 判断字符串2中是否不包含字符串1（判断字符串1是否不是字符串2的子串）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;abc&apos; in &apos;hello abc&apos;)   # True</span><br><span class="line">print(&apos;abc&apos; in &apos;ahello bc&apos;)   # False</span><br><span class="line">print(&apos;abc&apos; not in &apos;hello abc&apos;)   # False</span><br><span class="line">print(&apos;abc&apos; not in &apos;ahello bc&apos;)   # True</span><br></pre></td></tr></table></figure></p>
<h5 id="3-len函数"><a href="#3-len函数" class="headerlink" title="3.len函数"></a>3.len函数</h5><p>len(序列)   - 获取序列长度，获取序列中元素的个数<br>len(字符串) - 获取字符串长度(字符串个数)  –结果是一个整数<br><strong>注意:</strong><br><em>&emsp;一个可以转义的转义字符的长度是1，<br>&emsp;一个编码字符的长度是1，<br>&emsp;一个空格字符的长度是1,<br>&emsp;手动输入Tab键，长度为4，<br>&emsp;输入转义字符\t，长度为1</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(len(&apos;abc&apos;))</span><br><span class="line">str1 = input(&apos;请输入: &apos;)</span><br><span class="line">last_char = str1[len(str1)-1]    # 获取输入的字符串中的最后一个字符</span><br><span class="line">print(last_char)</span><br><span class="line">print(len(str1)-1)</span><br><span class="line">str1 = &apos;    abc&apos;</span><br><span class="line">str2 = &apos;\tabc&apos;</span><br><span class="line">print(str1, str2)</span><br><span class="line">print(len(str1), len(str2))     # 手动输入的Tab和\t对应的字符个数永远是1</span><br></pre></td></tr></table></figure></p>
<h4 id="格式字符串"><a href="#格式字符串" class="headerlink" title="格式字符串"></a>格式字符串</h4><h5 id="1-什么是格式字符串"><a href="#1-什么是格式字符串" class="headerlink" title="1. 什么是格式字符串:"></a>1. 什么是格式字符串:</h5><p>在字符串中通过格式占位符来代替字符串中变化的部分，然后在后面通过数据或者变量确定变化<br><strong>语法:</strong><br>&emsp;包含占位符的在字符串%(值1，值2，值3…)<br><strong>说明:</strong><br>&emsp;占位符 - %s 字符串<br>&emsp;&emsp;&emsp;&emsp;&emsp;%d 整数<br>&emsp;&emsp;&emsp;&emsp;&emsp;%f 小数   (%.Nf  保留小数点后N位小数)<br>&emsp;&emsp;&emsp;&emsp;&emsp;%c 字符   (可以将数字转换成相应的字符)<br>&emsp;&emsp;&emsp;&emsp;&emsp;%  - 固定写法<br>&emsp;&emsp;&emsp;&emsp;&emsp;() - 固定写法，字符串中只有一个占位符的时候，括号可以省略<br>&emsp;&emsp;&emsp;&emsp;&emsp;括号中的值  - 值和占位符要一一对应(个数、类型、位置都要对应)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">name = input(&apos;姓名: &apos;)</span><br><span class="line">age = 18</span><br><span class="line">sex = &apos;男&apos;</span><br><span class="line"># 加操作</span><br><span class="line">mesage = &apos;我叫XXX，今年XX岁，性别：X&apos;</span><br><span class="line">print(mesage)</span><br><span class="line"># 格式字符串</span><br><span class="line">mesage = &apos;我叫%s,今年%d,性别:%s&apos; %(name, age, sex)</span><br><span class="line">mesage = &apos;我叫&#123;&#125;,今年&#123;&#125;,性别:&#123;&#125;&apos;.format(name, age, sex)</span><br><span class="line">print(mesage)</span><br><span class="line"># 练习：输入一个字符串，用一个变量保存输入的相关信息：XXX的长度是X</span><br><span class="line"># 例如：输入abc -&gt; abc的长度是3，最后的一个字符串是c</span><br><span class="line">str = input(&apos;请输入字符串: &apos;)</span><br><span class="line">str_len = len(str)</span><br><span class="line">last_str = str[len(str)-1]</span><br><span class="line">mesage = &apos;%s的长度是%d,最后一个字符是%s&apos; %(str, str_len, last_str)</span><br><span class="line">print(mesage)</span><br></pre></td></tr></table></figure></p>
<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><h5 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h5><p><strong>语法：</strong><br>&emsp;类型名（数据）  -  将指定数据转换为指定类型<br><strong>说明：</strong><br>&emsp;类型名  - 任何Python支持的，或者自定的类型都可以<br>&emsp;数据  -  需要转换的对象（类型不同要求可能不一样）</p>
<h5 id="2-转换实例"><a href="#2-转换实例" class="headerlink" title="2.转换实例"></a>2.转换实例</h5><p>int(数据)  -&gt; 将其他数据转换成整型<br>float(数据) -&gt; 将其他数据转换成浮点型<br>bool(数据) -&gt; 将其他数据转换成布尔型<br>str(数据) -&gt; 将其他数据转换成字符串型<br><strong>a. 转换成整型</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">age = input(&apos;年龄：&apos;)</span><br><span class="line">print(&apos;是否能进入网吧:&apos;, int(age) &gt;= 18)</span><br><span class="line">a = int(12.9)  # 浮点数可以转换成整数，直接保留整数部分</span><br><span class="line">b = int(True)  # 所有布尔可以转换成整数， True -&gt; 1; Fasle -&gt; 0</span><br><span class="line">c = int(&apos;12&apos;)  # 只有去掉字符串的引号后本身就是一个整数的字符串才能转换为整数</span><br><span class="line">print(a,b,c)</span><br></pre></td></tr></table></figure></p>
<p><strong>b. 转换成浮点型</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = float(100)  # 所有整数都可以转换成浮点数</span><br><span class="line">b = float(True) # 所有布尔都可以转换成浮点数</span><br><span class="line">c = float(12.8) # 只有去掉字符串的引号后本身就是一个数的字符串才能转换为整数</span><br><span class="line">print(a, b, c)</span><br></pre></td></tr></table></figure></p>
<p><strong>c. Python中所有的数据都可以转换为布尔</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">所有为空为0的值都会转换为Float</span><br><span class="line">a = bool(100)   # 除0以外其他整数都为True</span><br><span class="line">b = bool(0.0)   # 除0.0以外其他数都为True</span><br><span class="line">c = bool(&apos;asd&apos;) # 除空串以外其他字符串都为True</span><br><span class="line">print(a, b, c)</span><br></pre></td></tr></table></figure></p>
<p><strong>d. 转换成字符串类型</strong><br>Python中所有的数据都可以转换成字符串，而且转换的时候就是单纯的在最外面添加引号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 练习：输入三个数字，求这三个数字的和</span><br><span class="line">num1 = input(&apos;第1个数字：&apos;)</span><br><span class="line">num2 = input(&apos;第2个数字：&apos;)</span><br><span class="line">num3 = input(&apos;第3个数字：&apos;)</span><br><span class="line">print(&apos;和为:&apos;,float(num1)+float(num2)+float(num3))</span><br></pre></td></tr></table></figure></p>
<h4 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h4><p>表中所有的字符串相关方法的使用方式：字符串.方法名()</p>
<h5 id="1-capitalize"><a href="#1-capitalize" class="headerlink" title="1.capitalize()"></a>1.capitalize()</h5><p>字符串.capitalize()  -将指定的字符串转换成大写字母，返回新的字符串<br><strong>注意：</strong> <em>只有第一个字符是字母的时候才有效</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = &apos;abc&apos;</span><br><span class="line">print(str1.capitalize())</span><br></pre></td></tr></table></figure></p>
<h5 id="2-字符串对其方式"><a href="#2-字符串对其方式" class="headerlink" title="2.字符串对其方式"></a>2.字符串对其方式</h5><p>字符串.center(width,fillchar)  width决定新的字符串长度，fillchar用来填充多出来的字符<br>字符串.ljust(width,fillchar)<br>字符串.rjust(width,fillchar)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = &apos;abc&apos;</span><br><span class="line">print(str1.center(9,&apos;X&apos;))</span><br><span class="line">print(str1.ljust(9,&apos;M&apos;))</span><br><span class="line">print(str1.rjust(9,&apos;+&apos;))</span><br></pre></td></tr></table></figure></p>
<h5 id="3-count"><a href="#3-count" class="headerlink" title="3.count"></a>3.count</h5><p>字符串1.count(字符串2)  - 在字符串1中统计字符串2出现的次数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;abc and hight&apos;.count(&apos;a&apos;))</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux基本指令]]></title>
      <url>/2019/02/23/Linux%E6%8C%87%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="连接云服务器"><a href="#连接云服务器" class="headerlink" title="连接云服务器"></a>连接云服务器</h3><h4 id="ssh密钥认证"><a href="#ssh密钥认证" class="headerlink" title="ssh密钥认证"></a>ssh密钥认证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.在主机和从机上执行：ssh-keygen</span><br><span class="line">2.在从机上执行:  scp  id_rsa.pub  root@主机地址:~/.ssh/master.pub</span><br><span class="line">(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’)</span><br><span class="line">3.在主机中的.ssh文件夹中创建authorized_keys文件： touch authorized_keys`</span><br><span class="line">4.修改文件authorized_keys的权限: chmod 600  authorized_keys` </span><br><span class="line">5.将master.pub放进authorized_keys文件中:  cat master.pub &gt;&gt;  authorized_keys</span><br><span class="line">6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中</span><br></pre></td></tr></table></figure>
<h4 id="密码登录"><a href="#密码登录" class="headerlink" title="密码登录"></a>密码登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">​连接服务器：①ssh root@47.95.9.84   ②yes  ③输入密码密码</span><br><span class="line">​退出服务器：logout</span><br></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://img1.imgtn.bdimg.com/it/u=1668415495,646318830&fm=26&gp=0.jpg" alt title class>
                <p></p>
            </figure>
<h4 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.安装git-bush(已安装请忽略)</span><br><span class="line">2.打开git-bush</span><br><span class="line">3.在本机系统目录下输入指令: shh-keygen</span><br><span class="line">4.修改生成公钥-秘钥对名</span><br><span class="line">5.进入.ssh文件夹查看生成公钥，并复制</span><br><span class="line">6.密码登录连接服务器</span><br><span class="line">7.将公钥复制到需要做免密登录的服务器中</span><br><span class="line">8.重新连接服务器: ssh  root@ip地址</span><br></pre></td></tr></table></figure>
<h3 id="Linux指令系统"><a href="#Linux指令系统" class="headerlink" title="Linux指令系统"></a>Linux指令系统</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令名称 [命名参数] [命令对象]</span><br></pre></td></tr></table></figure>
<h3 id="文件名颜色的含义"><a href="#文件名颜色的含义" class="headerlink" title="文件名颜色的含义"></a>文件名颜色的含义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">​默认色代表普通文件。</span><br><span class="line">​绿色代表可执行文件。</span><br><span class="line">​红色代表tar包文件。    </span><br><span class="line">​蓝色代表目录文件。  </span><br><span class="line">​水红代表图象文件。</span><br><span class="line">​青色代表链接文件。</span><br><span class="line">​黄色代表设备文件。</span><br></pre></td></tr></table></figure>
<h3 id="日常操作"><a href="#日常操作" class="headerlink" title="日常操作"></a>日常操作</h3><h4 id="1-cd命令-进入指定目录"><a href="#1-cd命令-进入指定目录" class="headerlink" title="1.cd命令(进入指定目录)"></a>1.cd命令(进入指定目录)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">​cd 文件目录       		-- 进入指定文件目录(~相对路径 — 绝对路径)</span><br><span class="line">​cd ..       	  		-- 返回上层目录</span><br><span class="line">​cd ~        	  		-- 返回根目录</span><br><span class="line">​cd /        	  		-- 进入系统根目录</span><br></pre></td></tr></table></figure>
<h4 id="2-ls命令-查看文件"><a href="#2-ls命令-查看文件" class="headerlink" title="2.ls命令(查看文件)"></a>2.ls命令(查看文件)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">​ls				-- 显示当前目录所有非隐藏文件</span><br><span class="line">​ls -a				-- 显示当前目录中的所有文件，包含隐藏文件</span><br><span class="line">​ls -l/lh			-- 显示文件及其详细信息</span><br><span class="line">ls -S/t				-- 显示文件并按大小、/时间排序</span><br><span class="line">​ls -R			 	-- 递归显示目录中的文件</span><br></pre></td></tr></table></figure>
<h4 id="3-pwd命令-显示当前目录"><a href="#3-pwd命令-显示当前目录" class="headerlink" title="3.pwd命令(显示当前目录)"></a>3.pwd命令(显示当前目录)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​pwd</span><br></pre></td></tr></table></figure>
<h4 id="4-mkdir命令-创建目录"><a href="#4-mkdir命令-创建目录" class="headerlink" title="4.mkdir命令(创建目录)"></a>4.mkdir命令(创建目录)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">​mkdir  目录			-- 创建空目录</span><br><span class="line">​mkdir -m 权限 目录		-- 创建一个带权限的目录</span><br><span class="line">​mkdir -p 目录1/目录2		-- 创建目录1且在目录1下创建目录2</span><br><span class="line">​mkdir -v 目录			-- 创建目录并显示信息</span><br></pre></td></tr></table></figure>
<h4 id="5-touch命令-创建文件"><a href="#5-touch命令-创建文件" class="headerlink" title="5.touch命令(创建文件)"></a>5.touch命令(创建文件)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​touch 文件名			-- 新建文件</span><br></pre></td></tr></table></figure>
<h4 id="6-打开文件"><a href="#6-打开文件" class="headerlink" title="6.打开文件"></a>6.打开文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​vim/vi 文件名			-- 打开文件</span><br></pre></td></tr></table></figure>
<h4 id="7-查看文件内容"><a href="#7-查看文件内容" class="headerlink" title="7.查看文件内容"></a>7.查看文件内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​cat 文件名			-- 查看文件</span><br></pre></td></tr></table></figure>
<h4 id="8-rm命令-删除文件-目录"><a href="#8-rm命令-删除文件-目录" class="headerlink" title="8.rm命令(删除文件/目录)"></a>8.rm命令(删除文件/目录)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">​rm 文件名			-- 删除文件</span><br><span class="line">​rm -r 目录			-- 删除目录</span><br><span class="line">​rm -f 文件/目录			-- 强制删除文件/删除目录</span><br></pre></td></tr></table></figure>
<h4 id="9-rmdir命令-删除空目录"><a href="#9-rmdir命令-删除空目录" class="headerlink" title="9.rmdir命令(删除空目录)"></a>9.rmdir命令(删除空目录)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​rmdir 目录名			-- 删除空目录(只能删除空目录)</span><br></pre></td></tr></table></figure>
<h4 id="10-cp命令-拷贝"><a href="#10-cp命令-拷贝" class="headerlink" title="10.cp命令(拷贝)"></a>10.cp命令(拷贝)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">​cp 文件1 文件2			-- 将文件1的内容拷贝到文件2，</span><br><span class="line">				   如果文件2不存在会先创建，再将内容拷贝到文件2中</span><br><span class="line">​cp -r 文件/目录1 目录2		-- 将文件/目录1拷贝到目录2中</span><br></pre></td></tr></table></figure>
<h4 id="11-mv命令-移动-不能加’-r’进行目录操作"><a href="#11-mv命令-移动-不能加’-r’进行目录操作" class="headerlink" title="11.mv命令(移动,不能加’-r’进行目录操作)"></a>11.mv命令(移动,不能加’-r’进行目录操作)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">​mv 文件1 新目录			-- 将文件移动到新目录</span><br><span class="line">​mv 目录名 新目录			-- 将文件移动到新目录</span><br><span class="line">​mv 文件名1 文件名2		-- 将文件重命名为文件名2</span><br><span class="line">​注意: mv指令不能加-r来操作目录</span><br></pre></td></tr></table></figure>
<h4 id="12-history命令-查看输入过的命令"><a href="#12-history命令-查看输入过的命令" class="headerlink" title="12.history命令(查看输入过的命令)"></a>12.history命令(查看输入过的命令)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​history</span><br></pre></td></tr></table></figure>
<h4 id="13-软链接-快捷方式-硬链接-了解"><a href="#13-软链接-快捷方式-硬链接-了解" class="headerlink" title="13.软链接(快捷方式)/硬链接(了解)"></a>13.软链接(快捷方式)/硬链接(了解)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">​ln -s 路径			-- 保存路径，通过软链接可以进入文件或目录，</span><br><span class="line">				   删除软链接并不影响源文件，删除源文件，软链接将无效</span><br><span class="line">​ln				-- 生产一个文件或目录与原文件或目录进行关联，</span><br><span class="line">				   删除硬链接的时候原文件或目录不会被删除，</span><br><span class="line">				   删除源文件硬链接还会存在，但会变为普通文件</span><br></pre></td></tr></table></figure>
<h4 id="14-文件操作快捷方式"><a href="#14-文件操作快捷方式" class="headerlink" title="14.文件操作快捷方式"></a>14.文件操作快捷方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+Insert			-- 复制命令</span><br><span class="line">Shift+Insert			-- 粘贴命令</span><br><span class="line">​Ctrl + a			-- 回到行首</span><br><span class="line">Ctrl + e			-- 回到行尾</span><br><span class="line">Ctrl + w			-- 向左删除一个单词</span><br><span class="line">Ctrl + u			-- 向左删除全部</span><br><span class="line">Ctrl + v			-- 向右删除全部</span><br><span class="line">Ctrl + y			-- 粘贴上次删除的内容</span><br><span class="line">Ctrl + l			-- 清屏</span><br></pre></td></tr></table></figure>
<h3 id="进程相关指令-用得较少"><a href="#进程相关指令-用得较少" class="headerlink" title="进程相关指令(用得较少)"></a>进程相关指令(用得较少)</h3><h4 id="1-ps指令-查看进程状态"><a href="#1-ps指令-查看进程状态" class="headerlink" title="1.ps指令(查看进程状态)"></a>1.ps指令(查看进程状态)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">​ps				-- 进程状态</span><br><span class="line">​ps -aux  或者  ps ex		-- 查看进程</span><br><span class="line">​ps -aux|grep 进程名		-- 查看指定进程</span><br><span class="line">​ps grep  进程ID</span><br></pre></td></tr></table></figure>
<h4 id="2-top-能实时监测当前系统里所有进程的状态"><a href="#2-top-能实时监测当前系统里所有进程的状态" class="headerlink" title="2.top(能实时监测当前系统里所有进程的状态)"></a>2.top(能实时监测当前系统里所有进程的状态)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">​top				-- 动态监控进程</span><br><span class="line">​top  -p PID1,PID2,….		-- 动态监控指定进程</span><br></pre></td></tr></table></figure>
<p>​    </p>
<h4 id="3-free-释放"><a href="#3-free-释放" class="headerlink" title="3.free(释放)"></a>3.free(释放)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">​free -单位			-- 以指定单位查看内存, </span><br><span class="line">				   例如: free -m (以Mb为单位显示内存状况), -g,  -k等！</span><br></pre></td></tr></table></figure>
<h4 id="4-kill-关闭进程"><a href="#4-kill-关闭进程" class="headerlink" title="4.kill(关闭进程)"></a>4.kill(关闭进程)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">​kill 进程号			-- 杀死指定的进程</span><br><span class="line">​kill -1/-9/-15			-- -1(HUP)不间断重启，-9(KILL)强制杀死进程,-15(TERM)正常终止进程</span><br><span class="line">​pkill  进程名			-- 按名字处理进程</span><br><span class="line">​killall 进程名			-- 处理名字匹配的进程</span><br><span class="line">​uptime				-- 查看系统状态</span><br></pre></td></tr></table></figure>
<h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><h4 id="1-user和group"><a href="#1-user和group" class="headerlink" title="1.user和group"></a>1.user和group</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">​一个系统可以有多个用户和多个分组； 一个分组中可以有多个用户，一个用户在不同的分组中(多对多)</span><br><span class="line">​users				-- 查看当前用户</span><br><span class="line">​groups 				-- 查看当前分组</span><br><span class="line">​groupadd  分组名			-- 添加分组</span><br><span class="line">useradd ‐G 分组列表 ‐m ‐s /bin/bash 用户名 -- 创建用户添加到指定的分组(在home创建相应的文件夹)</span><br><span class="line">usermod -G 分组列表 用户名	-- 修改分组</span><br><span class="line">passwd 用户名			-- 修改密码</span><br><span class="line">su  用户名			-- 切换用户身份</span><br><span class="line">sudo				-- 以管理员执行其他程序</span><br><span class="line">注意： a.在ubuntu需要将用户添加到sudo分组中，才能使用sudo以管理员的身份执行程序</span><br><span class="line">​      b.在centOS中需要先执行vi 指令进入sudoers文件中在指定的位置添加内容</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 指令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim编辑器之神]]></title>
      <url>/2019/02/21/vim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/</url>
      <content type="html"><![CDATA[<h1 id="vim编辑器之神"><a href="#vim编辑器之神" class="headerlink" title="vim编辑器之神"></a>vim编辑器之神</h1><h3 id="配置vimrc配置"><a href="#配置vimrc配置" class="headerlink" title="配置vimrc配置"></a>配置vimrc配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在shell中可以通过 `vim ~/.vimrc` 或者 `vim /etc/vimrc` 打开vimrc文件对vim进行配置。</span><br><span class="line">在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）：</span><br><span class="line">![](./img/vim1.png)</span><br></pre></td></tr></table></figure>
<h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="1-模式切换"><a href="#1-模式切换" class="headerlink" title="1.模式切换"></a>1.模式切换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我们可以将vim分为命令模式、编辑模式和末行模式三种  </span><br><span class="line">命令模式				-- 进入vim的时候vim是处于命令模式状态下的，</span><br><span class="line">				   这个时候输入内容不会出现在编辑区(最末什么都没有)</span><br><span class="line">末行模式				-- 在命令模式下输入冒号，让vim进入末行模式。</span><br><span class="line">				   在末行模式的冒号后面可以输入相关指令进行操作(最后有一个冒号)</span><br><span class="line">编辑模式				-- 在命令模式下按&apos;i&apos;进入编辑模式。</span><br><span class="line">				   在编辑模式下可以对文件内容进行编辑</span><br></pre></td></tr></table></figure>
<p>####2.保存和退出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面  </span><br><span class="line">w				-- 只保存(类似快捷键ctr+s)     </span><br><span class="line">q				-- 退出（在编辑区的内容全部都保存的情况下才有效）   </span><br><span class="line">wq				-- 保存并退出  </span><br><span class="line">q!				-- 强制退出（不保存修改信息）</span><br></pre></td></tr></table></figure></p>
<p>####3.光标操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">以下光标操作都是在命令模式下输入的  </span><br><span class="line">^(shift+6)			-- 移动到行首  </span><br><span class="line">$(shift+4)			-- 移动到行尾  </span><br><span class="line">G(shift+g)			-- 移动到文件末尾</span><br><span class="line">行号G				-- 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行</span><br><span class="line">gg				-- 移动到文件开头</span><br></pre></td></tr></table></figure></p>
<p>####4.文本操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入  </span><br><span class="line">dd				-- 删除光标所在的行    </span><br><span class="line">数字dd				-- 从光标所在行开始往后面开始删，删除指定数量行内容    </span><br><span class="line">:%d				-- 删除所有     </span><br><span class="line">yy				-- 复制光标所在的行  </span><br><span class="line">数字yy				-- 从光标所在行开始复制指定行数的内容   </span><br><span class="line">p				-- 将复制的内容粘贴到光标所在的位置  </span><br><span class="line">u				-- 撤销      </span><br><span class="line">ctr+r				-- 反撤销    </span><br><span class="line">:%!sort				-- 对内容排序  </span><br><span class="line">:/查找对象[/gice]		-- 搜索匹配正则表达式的内容，</span><br><span class="line">				   按回车回到命令模式后按n往前查找，按N往后查找  </span><br><span class="line">:1,$s/被替换对象/替换内容[/gice*]	-- 将正则表达式匹配到的内容替换成指定内容   </span><br><span class="line">				-- g: 全局匹配  </span><br><span class="line">				-- i: 忽略大小写 </span><br><span class="line">				-- c: 替换时需要提示  </span><br><span class="line">				-- e: 忽略错误</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 编辑器 </category>
            
            <category> vim </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx服务器安装]]></title>
      <url>/2019/02/21/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="Nginx服务器"><a href="#Nginx服务器" class="headerlink" title="Nginx服务器"></a>Nginx服务器</h2><h3 id="阿里云添加80端口"><a href="#阿里云添加80端口" class="headerlink" title="阿里云添加80端口"></a>阿里云添加80端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">阿里云上默认只有一个22端口用来做远程登录，</span><br><span class="line">如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口</span><br><span class="line">![打开安全组设置](./img/aliyun0.png)  </span><br><span class="line">![](./img/aliyun2.png)</span><br><span class="line">![](./img/aliyun3.png)</span><br><span class="line">![](./img/aliyun4.png)</span><br></pre></td></tr></table></figure>
<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><h5 id="添加nginx存储库"><a href="#添加nginx存储库" class="headerlink" title="添加nginx存储库"></a>添加nginx存储库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure>
<h5 id="安装nginx-1"><a href="#安装nginx-1" class="headerlink" title="安装nginx"></a>安装nginx</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure>
<h5 id="运行nginx"><a href="#运行nginx" class="headerlink" title="运行nginx"></a>运行nginx</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Nginx不会自行启动。要运行Nginx  </span><br><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure>
<h5 id="nginx的运行命令"><a href="#nginx的运行命令" class="headerlink" title="nginx的运行命令"></a>nginx的运行命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl status nginx 查看nginx的状态  </span><br><span class="line">systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动</span><br></pre></td></tr></table></figure>
<h5 id="系统启动时启动Nginx"><a href="#系统启动时启动Nginx" class="headerlink" title="系统启动时启动Nginx"></a>系统启动时启动Nginx</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure>
<h5 id="如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信："><a href="#如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：" class="headerlink" title="如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信："></a>如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=http </span><br><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h3 id="nginx目录共享配置"><a href="#nginx目录共享配置" class="headerlink" title="nginx目录共享配置"></a>nginx目录共享配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting  </span><br><span class="line">b) 打开 etc/nginx/nginx.conf 文件，设置server</span><br><span class="line">  #共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表</span><br><span class="line">  location / &#123;</span><br><span class="line">    root /home/lhy;</span><br><span class="line">    autoindex on;</span><br><span class="line">    autoindex_exact_size on;</span><br><span class="line">    autoindex_localtime on;</span><br><span class="line">  &#125;  </span><br><span class="line">除了可以共享文件，还可以自定义页面</span><br><span class="line">  #自定义服务器页面</span><br><span class="line">  location / &#123;</span><br><span class="line">    root /home/yuting;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">注意： 如果出现权限问题，可以修改目录的权限</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 服务器 </category>
            
            <category> Nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> 配置 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL配置指令]]></title>
      <url>/2019/02/21/MySQL%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h4 id="下载MySQL源安装包"><a href="#下载MySQL源安装包" class="headerlink" title="下载MySQL源安装包"></a>下载MySQL源安装包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure>
<h4 id="安装MySQL源"><a href="#安装MySQL源" class="headerlink" title="安装MySQL源"></a>安装MySQL源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure>
<h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure>
<h4 id="设置开启启动MySQL服务"><a href="#设置开启启动MySQL服务" class="headerlink" title="设置开启启动MySQL服务"></a>设置开启启动MySQL服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure>
<h4 id="启动-重启MySQL服务"><a href="#启动-重启MySQL服务" class="headerlink" title="启动/重启MySQL服务"></a>启动/重启MySQL服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>
<h4 id="查看MySQL初始密码"><a href="#查看MySQL初始密码" class="headerlink" title="查看MySQL初始密码"></a>查看MySQL初始密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &apos;A temporary password&apos; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>
<h4 id="更改MySQL密码"><a href="#更改MySQL密码" class="headerlink" title="更改MySQL密码"></a>更改MySQL密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p&apos;旧密码&apos; password &apos;新密码&apos;  </span><br><span class="line">这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法：</span><br><span class="line">	方法一：把密码设置复杂点（这是最直接的方法）</span><br><span class="line">	方法二：关闭mysql密码强度验证(validate_password)</span><br><span class="line">编辑配置文件：vim /etc/my.cnf， 增加这么一行validate_password=off</span><br><span class="line">编辑后重启mysql服务：systemctl restart mysqld</span><br></pre></td></tr></table></figure>
<p>　　　　　　　  </p>
<h4 id="设置mysql能够远程访问"><a href="#设置mysql能够远程访问" class="headerlink" title="设置mysql能够远程访问"></a>设置mysql能够远程访问</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a. 登录进MySQL: mysql -uroot -p密码</span><br><span class="line">b. 增加一个用户给予访问权限: grant all privileges on *.* to &apos;root&apos;@&apos;%%&apos; identified </span><br><span class="line">			   by &apos;密码&apos; with grant option;</span><br><span class="line">c. 刷新权限: flush privileges;­</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 指令 </tag>
            
            <tag> 安装 </tag>
            
            <tag> 启动 </tag>
            
            <tag> 查看 </tag>
            
            <tag> 修改 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客搭建]]></title>
      <url>/2019/02/21/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js   </span><br><span class="line">首先在自己的电脑上创建一个空的文件夹&apos;Hexo&apos;  </span><br><span class="line">在gitbash中终端中通过 cd 指令进入到刚才创建的文件夹中   </span><br><span class="line">输入指令 npm install -g hexo 安装Hexo  </span><br><span class="line">输入指令 hexo init 进行初始化  </span><br><span class="line">依次输入指令 npm install、hexo server 启动服务器  </span><br><span class="line">博客内容发生改变后可以通过 hexo clean、hexo generate、hexo deploy、hexo server 刷新后重新启动</span><br></pre></td></tr></table></figure>
<h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 在github上创建一个空的仓库，仓库名：用户名.github.io  </span><br><span class="line">2. 修改博客本地仓库中的配置文件（Hexo目录下的_config.yml文件）,在文件末尾添加一下选中内容</span><br><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository: &lt;url仓库地址&gt;</span><br><span class="line">    branch: master</span><br><span class="line">3. 使用git部署, 输入指令 npm install hexo-deployer-git --save  </span><br><span class="line">4. 依次输入指令 hexo clean、hexo generate、hexo deploy 对博客进行提交</span><br></pre></td></tr></table></figure>
<h3 id="更新博客"><a href="#更新博客" class="headerlink" title="更新博客"></a>更新博客</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">依次输入指令 hexo clean、hexo generate、hexo deploy 对博客进行提交</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 搭建 </tag>
            
            <tag> 部署 </tag>
            
            <tag> 更新 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git常用指令]]></title>
      <url>/2019/02/21/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="git常用指令"><a href="#git常用指令" class="headerlink" title="git常用指令"></a>git常用指令</h3><h4 id="1-基本指令"><a href="#1-基本指令" class="headerlink" title="1.基本指令"></a>1.基本指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git init                            -- 新建git仓库      </span><br><span class="line">git add 文件/文件夹                  -- 将文件添加到缓存区中  </span><br><span class="line">git add -A                          -- 添加所有内容到缓存区中</span><br><span class="line">git stutas                          -- 查看git状态  </span><br><span class="line">git commit -m  ‘提交信息’            -- 将缓存区中的内容全部提交到git本地仓库中  </span><br><span class="line">git log                             -- 查看提交日志  </span><br><span class="line">git reset -- hard HEAD              -- 让工作目录中的内容和仓库中的内容保持一致  </span><br><span class="line">git reset --hard HEAD^              -- 回到上一个版本  </span><br><span class="line">git reset -- hard 版本号             -- 回到指定的版本  </span><br><span class="line">git checkout -- 文件名               -- 从暂存区中恢复工作目录中的内容</span><br><span class="line">                                       (让工作区中的指定文件，回到上次提交的时候的状态) </span><br><span class="line">git clone &lt;url&gt;                      -- 将服务器上的项目(仓库)克隆</span><br><span class="line">                                       (使用https地址需要输入密码，使用ssh地址需要添加公钥)  </span><br><span class="line">git remote add origin 地址           -- 关联远程仓库(只需要关联一次)</span><br><span class="line">git push [-u] origin master          -- 提交(-u在第一次提交分之的时候才用)</span><br></pre></td></tr></table></figure>
<h4 id="2-分之管理"><a href="#2-分之管理" class="headerlink" title="2.分之管理"></a>2.分之管理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;</span><br><span class="line">开发一般会自己创建一个develop分之，用来开发和测试;</span><br><span class="line">多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发。  </span><br><span class="line">常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发)  </span><br><span class="line">git branch [-a]                       -- 查看分之   </span><br><span class="line">git branch 分之名                     -- 创建分之   </span><br><span class="line">git checkout 分支名		      -- 切换分之      </span><br><span class="line">git checkout -b 分之名                -- 切换并创建新的分之   </span><br><span class="line">git diff 分之1 分之2	              -- 查看两个分之之间的差异  </span><br><span class="line">git merge 分之名		              -- 让当前分之和指定分之进行合并     </span><br><span class="line">注意: 切换分之、push、pull，这些操作前要保证工作区是clean  </span><br><span class="line">怎么避免冲突：不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 指令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2019/02/21/HTTP%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="HTTP基本原理"><a href="#HTTP基本原理" class="headerlink" title="HTTP基本原理"></a>HTTP基本原理</h1><p>URI(Uniform Resource Identifier): 统一资源标志符</p>
<p>URL(Universal Resource Locator): 统一资源定位符</p>
<p>URN(Universal Resource Name): 统一资源名称</p>
<p>Proxy-Connection<br>    当使⽤代理服务器的时候，这个就指明了代理服务器是否使⽤⻓链接。但是，数据在从client 到代理服务器，和从代理服务器到被请求的服务器之间如果存在信息差异的话，会造成信息请求不到，但是在⼤多数情况下，都还是能够成⽴的。</p>
<p>Pragma<br>    防⽌⻚⾯被缓存, 和 cache-control类似的⼀个字段，⼀般爬⾍都写成 no-cache。</p>
<p>Cookie<br>    同样是⼀个⽐较关键的字段，Cookie是 client 请求 服务器时，服务器会返回⼀个键值对样的数据给浏览器，下⼀次浏览器再访问这个域名下的⽹⻚时，就需要携带这些键值对数据在Cookie中，⽤来跟踪浏览器⽤户的访问前后路径。<br>    在爬⾍时，根据前次访问得到 cookie数据，然后添加到下⼀次的访问请求头中。<br>Host<br>    访问的服务器主机名，⽐如百度的 <a href="http://www.baidu.com。这个值在爬⾍时可以从" target="_blank" rel="noopener">www.baidu.com。这个值在爬⾍时可以从</a> 访问的 URI 中获得。<br>If-Modified-Since<br>    只有当所请求的内容在指定的⽇期之后⼜经过修改才返回它，否则返回304。其⽬的是为了提⾼访问效率。但是在爬⾍时，不设置这个值，⽽在增量爬取时才设置⼀个这样的值，⽤以更新信息。<br>Authorization<br>    当客户端接收到来⾃WEB服务器的 WWW-Authenticate 响应时，该头部来回应⾃⼰的身份验证信息给WEB服务器主要是授权验证确定符合服务器的要求这个在爬⾍时按需</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2019/02/21/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
